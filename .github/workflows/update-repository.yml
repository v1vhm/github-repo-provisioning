# Inputs:
#   port_payload: Port JSON payload
#   mock: When true, skip side-effecting steps (default: false)
# Port payload keys used (see docs/port-payload-contracts.md):
# - runId
# - blueprint
# - requestedBy
# - properties.repo_name
# - properties.description
# - properties.visibility
# - properties.homepage_url
# - properties.topics
# - properties.delete_branch_on_merge
# - properties.enable_issues
# - properties.enable_wiki
# - properties.default_branch
# - properties.custom_properties
name: Update GitHub repository

on:
  workflow_dispatch:
    inputs:
      port_payload:
        description: "Port JSON payload"
        required: true
        type: string
      mock:
        description: "Run in mock mode, skipping side effects"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write
  actions: read

env:
  GH_ORG: ${{ github.repository_owner }}

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          owner: ${{ env.GH_ORG }}
      - name: Export token
        run: |
          echo "GITHUB_TOKEN=${{ steps.app-token.outputs.token }}" >> "$GITHUB_ENV"
          echo "GH_TOKEN=${{ steps.app-token.outputs.token }}" >> "$GITHUB_ENV"
      - name: Configure git user
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          user_id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email "${user_id}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com"
      - name: Configure git remote
        run: |
          if [ -d .git ]; then
            git remote set-url origin "https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${GITHUB_REPOSITORY}.git"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Parse payload
        run: |
          set -euo pipefail
          PAYLOAD='${{ inputs.port_payload }}'
          echo "$PAYLOAD" | jq -e '.runId,.blueprint,.properties.repo_name' >/dev/null
          REPO_NAME=$(echo "$PAYLOAD" | jq -r .properties.repo_name | xargs)
          DESC_PAYLOAD=$(echo "$PAYLOAD" | jq -r '.properties.description // ""')
          VIS_PAYLOAD=$(echo "$PAYLOAD" | jq -r '.properties.visibility // ""' | xargs)
          if [ -n "$VIS_PAYLOAD" ] && [[ "$VIS_PAYLOAD" != "private" && "$VIS_PAYLOAD" != "internal" && "$VIS_PAYLOAD" != "public" ]]; then
            echo "Invalid visibility: $VIS_PAYLOAD" >&2; exit 1; fi
          HOMEPAGE_PAYLOAD=$(echo "$PAYLOAD" | jq -r '.properties.homepage_url // ""' | xargs)
          TOPICS_PAYLOAD=$(echo "$PAYLOAD" | jq -c '.properties.topics // empty')
          if [ -n "$TOPICS_PAYLOAD" ]; then
            echo "$TOPICS_PAYLOAD" | jq -e 'all(type=="string")' >/dev/null || { echo "topics must be array of strings" >&2; exit 1; }
          fi
          DBM_PAYLOAD=$(echo "$PAYLOAD" | jq -r '.properties.delete_branch_on_merge // ""')
          ISSUES_PAYLOAD=$(echo "$PAYLOAD" | jq -r '.properties.enable_issues // ""')
          WIKI_PAYLOAD=$(echo "$PAYLOAD" | jq -r '.properties.enable_wiki // ""')
          DB_PAYLOAD=$(echo "$PAYLOAD" | jq -r '.properties.default_branch // ""' | xargs)
          CUSTOM_PAYLOAD=$(echo "$PAYLOAD" | jq -c '.properties.custom_properties // {}')
          {
            echo "RUN_ID=$(echo "$PAYLOAD" | jq -r .runId)"
            echo "BLUEPRINT=$(echo "$PAYLOAD" | jq -r .blueprint)"
            echo "REQUESTED_BY=$(echo "$PAYLOAD" | jq -r .requestedBy)"
            echo "REPO_NAME=$REPO_NAME"
            echo "DESCRIPTION_PAYLOAD=$DESC_PAYLOAD"
            echo "VISIBILITY_PAYLOAD=$VIS_PAYLOAD"
            echo "HOMEPAGE_URL_PAYLOAD=$HOMEPAGE_PAYLOAD"
            echo "TOPICS_PAYLOAD=$TOPICS_PAYLOAD"
            echo "DELETE_BRANCH_ON_MERGE_PAYLOAD=$DBM_PAYLOAD"
            echo "ENABLE_ISSUES_PAYLOAD=$ISSUES_PAYLOAD"
            echo "ENABLE_WIKI_PAYLOAD=$WIKI_PAYLOAD"
            echo "DEFAULT_BRANCH_PAYLOAD=$DB_PAYLOAD"
            echo "CUSTOM_PAYLOAD=$CUSTOM_PAYLOAD"
          } >> "$GITHUB_ENV"

      - name: Mock run notice
        if: ${{ inputs.mock }}
        run: |
          echo "Mock run: skipping side-effecting steps"

      - name: Load existing manifest
        run: |
          set -e
          MANIFEST_PATH="repositories/manifests/${REPO_NAME}.yaml"
          if [ ! -f "$MANIFEST_PATH" ]; then
            echo "Manifest $MANIFEST_PATH not found" >&2; exit 1; fi
          pip install pyyaml >/dev/null
          python - <<'PY' >> "$GITHUB_ENV"
            import os, json, yaml
            p=os.environ['MANIFEST_PATH']
            with open(p) as f:
              data=yaml.safe_load(f)
            meta=data.get('metadata',{})
            spec=data.get('spec',{})
            settings=spec.get('settings',{})
            status=data.get('status',{})
            print(f"EXISTING_DESCRIPTION={spec.get('description','')}")
            print(f"EXISTING_VISIBILITY={spec.get('visibility','')}")
            print(f"EXISTING_HOMEPAGE_URL={spec.get('homepageUrl','') or ''}")
            import json as j
            print(f"EXISTING_TOPICS={j.dumps(spec.get('topics',[]))}")
            print(f"EXISTING_DELETE_BRANCH_ON_MERGE={str(settings.get('deleteBranchOnMerge', True)).lower()}")
            print(f"EXISTING_ENABLE_ISSUES={str(settings.get('enableIssues', True)).lower()}")
            print(f"EXISTING_ENABLE_WIKI={str(settings.get('enableWiki', False)).lower()}")
            print(f"EXISTING_DEFAULT_BRANCH={settings.get('defaultBranch','')}")
            print(f"EXISTING_CUSTOM={j.dumps(spec.get('custom', {}))}")
            print(f"EXISTING_ID={status.get('id','')}")
            print(f"EXISTING_HTML_URL={status.get('htmlUrl','')}")
            print(f"EXISTING_SSH_URL={status.get('sshUrl','')}")
            print(f"EXISTING_CREATED_AT={meta.get('createdAt','')}")
            print(f"EXISTING_CREATED_BY={meta.get('createdBy','')}")
          PY

      - name: Compute desired state
        run: |
          set -e
          DESCRIPTION=${DESCRIPTION_PAYLOAD:-$EXISTING_DESCRIPTION}
          VISIBILITY=${VISIBILITY_PAYLOAD:-$EXISTING_VISIBILITY}
          HOMEPAGE_URL=${HOMEPAGE_URL_PAYLOAD:-$EXISTING_HOMEPAGE_URL}
          if [ -n "$HOMEPAGE_URL" ]; then
            HOMEPAGE_URL_JSON="\"$HOMEPAGE_URL\""
          else
            HOMEPAGE_URL_JSON=null
          fi
          if [ -n "$TOPICS_PAYLOAD" ]; then
            TOPICS=$(echo "$TOPICS_PAYLOAD" | jq -c 'map(ascii_downcase)|unique')
          else
            TOPICS="$EXISTING_TOPICS"
          fi
          DBM=${DELETE_BRANCH_ON_MERGE_PAYLOAD:-$EXISTING_DELETE_BRANCH_ON_MERGE}
          ISS=${ENABLE_ISSUES_PAYLOAD:-$EXISTING_ENABLE_ISSUES}
          WIKI=${ENABLE_WIKI_PAYLOAD:-$EXISTING_ENABLE_WIKI}
          DB=${DEFAULT_BRANCH_PAYLOAD:-$EXISTING_DEFAULT_BRANCH}
          if [ -n "$DB" ]; then
            DEFAULT_BRANCH_JSON="\"$DB\""
          else
            DEFAULT_BRANCH_JSON=null
          fi
          CUSTOM=$(jq -c -n --argjson existing "$EXISTING_CUSTOM" --argjson payload "$CUSTOM_PAYLOAD" '$existing + $payload')
          {
            echo "DESCRIPTION=$DESCRIPTION"
            echo "VISIBILITY=$VISIBILITY"
            echo "HOMEPAGE_URL=$HOMEPAGE_URL"
            echo "HOMEPAGE_URL_JSON=$HOMEPAGE_URL_JSON"
            echo "TOPICS_FINAL=$TOPICS"
            echo "DELETE_BRANCH_ON_MERGE=$DBM"
            echo "ENABLE_ISSUES=$ISS"
            echo "ENABLE_WIKI=$WIKI"
            echo "DEFAULT_BRANCH=$DB"
            echo "DEFAULT_BRANCH_JSON=$DEFAULT_BRANCH_JSON"
            echo "CUSTOM_FINAL=$CUSTOM"
          } >> "$GITHUB_ENV"

      - name: Ensure repository and branch exist
        run: |
          set -e
          gh api "repos/${GH_ORG}/${REPO_NAME}" >/dev/null
          if [ -n "${DEFAULT_BRANCH}" ]; then
            gh api "repos/${GH_ORG}/${REPO_NAME}/branches/${DEFAULT_BRANCH}" >/dev/null
          fi

      - name: Azure login
        if: ${{ !inputs.mock }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        if: ${{ !inputs.mock }}
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        if: ${{ !inputs.mock }}
        working-directory: repositories/modules/repo
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.AZURE_STORAGE_CONTAINER }}" \
            -backend-config="key=repos/${REPO_NAME}.tfstate" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform plan and apply
        if: ${{ !inputs.mock }}
        working-directory: repositories/modules/repo
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -e
            cat > payload.auto.tfvars.json <<'VARS'
            {
              "org": "$GH_ORG",
              "repo_name": "$REPO_NAME",
              "description": "$DESCRIPTION",
              "visibility": "$VISIBILITY",
              "homepage_url": $HOMEPAGE_URL_JSON,
              "topics": $TOPICS_FINAL,
              "delete_branch_on_merge": $DELETE_BRANCH_ON_MERGE,
              "enable_issues": $ENABLE_ISSUES,
              "enable_wiki": $ENABLE_WIKI,
              "default_branch": $DEFAULT_BRANCH_JSON
            }
          VARS
          terraform plan -out=tfplan -detailed-exitcode >/tmp/plan.log && code=$? || code=$?
          if [ $code -eq 2 ]; then
            TF_HAS_CHANGES=1
          elif [ $code -eq 0 ]; then
            TF_HAS_CHANGES=0
          else
            cat /tmp/plan.log
            exit $code
          fi
          terraform apply -auto-approve tfplan
          terraform output -json > tf.json
          {
            echo "TF_HAS_CHANGES=$TF_HAS_CHANGES"
            echo "REPO_ID=$(jq -r .repo_id.value tf.json)"
            echo "HTML_URL=$(jq -r .html_url.value tf.json)"
            echo "SSH_URL=$(jq -r .ssh_url.value tf.json)"
            echo "DEFAULT_BRANCH=$(jq -r .default_branch.value tf.json)"
          } >> "$GITHUB_ENV"

      - name: Cleanup Terraform
        if: ${{ always() && !inputs.mock }}
        working-directory: repositories/modules/repo
        run: rm -rf .terraform terraform.tfstate*

      - name: Compute change message
        if: ${{ !inputs.mock }}
        run: |
          total=$TF_HAS_CHANGES
          if [ "$total" -eq 0 ]; then
            PORT_MESSAGE="no-op (already up to date)"
          else
            PORT_MESSAGE="repository updated"
          fi
          {
            echo "CHANGES=$total"
            echo "PORT_MESSAGE=$PORT_MESSAGE"
          } >> "$GITHUB_ENV"

      - name: Upsert entity to Port
        if: ${{ !inputs.mock }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          identifier: ${{ env.REPO_NAME }}
          title: ${{ env.REPO_NAME }}
          blueprint: ${{ env.BLUEPRINT }}
          properties: |
            {
              "description": "${{ env.DESCRIPTION }}",
              "htmlUrl": "${{ env.HTML_URL }}",
              "sshUrl": "${{ env.SSH_URL }}",
              "visibility": "${{ env.VISIBILITY }}",
              "homepageUrl": ${{ env.HOMEPAGE_URL_JSON }},
              "topics": ${{ env.TOPICS_FINAL }},
              "custom": ${{ env.CUSTOM_FINAL }}
            }
          runId: ${{ env.RUN_ID }}
          status: success
          logMessage: ${{ env.PORT_MESSAGE }}

      - name: Update manifest
        if: ${{ !inputs.mock }}
        run: |
          set -e
          pip install pyyaml >/dev/null
          python - <<'PY' >> "$GITHUB_ENV"
            import os, yaml, json, datetime
            repo=os.environ['REPO_NAME']
            path=f"repositories/manifests/{repo}.yaml"
            if os.path.exists(path):
              with open(path) as f:
                data=yaml.safe_load(f)
            else:
              data={'apiVersion':'v1','kind':'GitHubRepository','metadata':{'name':repo}}
            meta=data.setdefault('metadata',{})
            if os.getenv('EXISTING_CREATED_AT'):
              meta['createdAt']=os.environ['EXISTING_CREATED_AT']
            if os.getenv('EXISTING_CREATED_BY'):
              meta['createdBy']=os.environ['EXISTING_CREATED_BY']
            spec=data.setdefault('spec',{})
            spec['description']=os.environ['DESCRIPTION']
            spec['visibility']=os.environ['VISIBILITY']
            spec['homepageUrl']=os.environ.get('HOMEPAGE_URL') or None
            spec['topics']=json.loads(os.environ['TOPICS_FINAL'])
            settings=spec.setdefault('settings',{})
            settings['deleteBranchOnMerge']=os.environ['DELETE_BRANCH_ON_MERGE'].lower()=='true'
            settings['enableIssues']=os.environ['ENABLE_ISSUES'].lower()=='true'
            settings['enableWiki']=os.environ['ENABLE_WIKI'].lower()=='true'
            branch=os.environ.get('DEFAULT_BRANCH')
            settings['defaultBranch']=branch if branch else None
            custom=json.loads(os.environ['CUSTOM_FINAL'])
            if custom:
              spec['custom']=custom
            elif 'custom' in spec:
              del spec['custom']
            status=data.setdefault('status',{})
            status['id']=os.environ.get('REPO_ID') or os.environ.get('EXISTING_ID')
            status['htmlUrl']=os.environ.get('HTML_URL') or os.environ.get('EXISTING_HTML_URL')
            status['sshUrl']=os.environ.get('SSH_URL') or os.environ.get('EXISTING_SSH_URL')
            status['phase']='active'
            status['lastUpdatedAt']=datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
            os.makedirs('repositories/manifests', exist_ok=True)
            with open(path,'w') as f:
              yaml.safe_dump(data,f,sort_keys=False)
            print(f"MANIFEST={path}")
          PY

      - name: Commit manifest
        if: ${{ !inputs.mock }}
        uses: ./.github/actions/commit-yaml
        with:
          path: ${{ env.MANIFEST }}
          message: Update repository '${{ env.REPO_NAME }}' (automated via Port)

      - name: Report failure to Port
        if: ${{ failure() && !inputs.mock }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.RUN_ID }}
          status: failure
          logMessage: 'Workflow failed'

# Tests:
# - Happy path: update description and topics.
# - Visibility change: private -> internal/public.
# - Default branch: set to existing main.
# - No-op: identical payload -> success, no changes.
# - Bad default branch: fails validation; Port failure reported.
