# Inputs:
#   port_payload: Port JSON payload
#   mock: When true, skip side-effecting steps (default: false)
# Port payload keys used (see docs/port-payload-contracts.md):
# - runId
# - blueprint
# - requestedBy
# - properties.team_name
# - properties.privacy
# - properties.description
# - properties.parent_team_slug
# - properties.members
# - properties.alias_slugs
name: Create GitHub team

on:
  workflow_dispatch:
    inputs:
      port_payload:
        description: "Port JSON payload"
        required: true
        type: string
      mock:
        description: "Run in mock mode, skipping side effects"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write
  actions: read

env:
  GH_ORG: ${{ github.repository_owner }}

jobs:
  create:
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          owner: ${{ env.GH_ORG }}
      - name: Export token
        run: |
          echo "GITHUB_TOKEN=${{ steps.app-token.outputs.token }}" >> "$GITHUB_ENV"
          echo "GH_TOKEN=${{ steps.app-token.outputs.token }}" >> "$GITHUB_ENV"
      - name: Configure git user
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          user_id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email "${user_id}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com"
      - name: Configure git remote
        run: |
          if [ -d .git ]; then
            git remote set-url origin "https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${GITHUB_REPOSITORY}.git"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Parse payload
        id: parse
        run: |
          PAYLOAD='${{ inputs.port_payload }}'
          echo "$PAYLOAD" | jq -e '.runId,.blueprint,.properties.team_name,.properties.privacy' >/dev/null
          TEAM_NAME=$(echo "$PAYLOAD" | jq -r .properties.team_name)
          PRIVACY=$(echo "$PAYLOAD" | jq -r .properties.privacy)
          if [[ "$PRIVACY" != "closed" && "$PRIVACY" != "secret" ]]; then
            echo "Invalid privacy: $PRIVACY" >&2
            exit 1
          fi
          DESCRIPTION=$(echo "$PAYLOAD" | jq -r '.properties.description // ""')
          PARENT=$(echo "$PAYLOAD" | jq -r '.properties.parent_team_slug // ""')
          MEMBERS=$(echo "$PAYLOAD" | jq -c '.properties.members // []')
          ALIASES=$(echo "$PAYLOAD" | jq -c '.properties.alias_slugs // []')
          RUN_ID=$(echo "$PAYLOAD" | jq -r .runId)
          BLUEPRINT=$(echo "$PAYLOAD" | jq -r .blueprint)
          REQUESTED_BY=$(echo "$PAYLOAD" | jq -r .requestedBy)
          SLUG=$(echo "$TEAM_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g;s/^-+//;s/-+$//;s/-{2,}/-/g')
          CREATED_AT=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          if [[ -n "$PARENT" ]]; then
            PARENT_REL="\"$PARENT\""
          else
            PARENT_REL=null
          fi
          {
            echo "TEAM_NAME=$TEAM_NAME"
            echo "TEAM_SLUG=$SLUG"
            echo "PRIVACY=$PRIVACY"
            echo "DESCRIPTION=$DESCRIPTION"
            echo "PARENT_TEAM_SLUG=$PARENT"
            echo "MEMBERS=$MEMBERS"
            echo "ALIASES=$ALIASES"
            echo "RUN_ID=$RUN_ID"
            echo "BLUEPRINT=$BLUEPRINT"
            echo "REQUESTED_BY=$REQUESTED_BY"
            echo "CREATED_AT=$CREATED_AT"
            echo "PARENT_REL=$PARENT_REL"
          } >> "$GITHUB_ENV"

      - name: Mock run notice
        if: ${{ inputs.mock }}
        run: |
          echo "Mock run: skipping side-effecting steps"

      - name: Validate team slug
        run: ./scripts/validate-team-name.sh "$GH_ORG" "$TEAM_SLUG"

      - name: Validate parent team
        if: env.PARENT_TEAM_SLUG != ''
        run: |
          if ! gh api "orgs/${GH_ORG}/teams/${PARENT_TEAM_SLUG}" >/dev/null 2>&1; then
            echo "Parent team ${PARENT_TEAM_SLUG} not found" >&2
            exit 1
          fi

      - name: Filter members
        id: members
        run: |
          existing='[]'
          skipped=''
          for row in $(echo "$MEMBERS" | jq -c '.[]'); do
            username=$(echo "$row" | jq -r .username)
            role=$(echo "$row" | jq -r .role)
            if [[ "$role" != "member" && "$role" != "maintainer" ]]; then
              skipped="$skipped $username"
              continue
            fi
            if gh api "orgs/${GH_ORG}/members/${username}" >/dev/null 2>&1; then
              existing=$(echo "$existing" | jq ". + [{\"username\":\"$username\",\"role\":\"$role\"}]")
            else
              skipped="$skipped $username"
            fi
          done
          {
            echo "TF_MEMBERS=$existing"
            if [[ -n "$skipped" ]]; then
              echo "PORT_MESSAGE=Skipped members:$skipped"
            fi
          } >> "$GITHUB_ENV"

      - name: Draft manifest
        run: |
          mkdir -p teams/manifests
          members_block=$(echo "$TF_MEMBERS" | jq -r '.[] | "- username: \(.username)\n  role: \(.role)"')
          aliases_block=$(echo "$ALIASES" | jq -r '.[] | "- \(.)"')
          members_formatted=$(if [ -n "$members_block" ]; then echo "$members_block" | sed 's/^/    /'; else echo "    []"; fi)
          aliases_formatted=$(if [ -n "$aliases_block" ]; then echo "$aliases_block" | sed 's/^/    /'; else echo "    []"; fi)
          scripts/draft-team-manifest.sh "$TEAM_SLUG" "$TEAM_NAME" "$CREATED_AT" "$REQUESTED_BY" "$DESCRIPTION" "$PRIVACY" "$PARENT_TEAM_SLUG" "$members_formatted" "$aliases_formatted"

      - name: Azure login
        if: ${{ !inputs.mock }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        if: ${{ !inputs.mock }}
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        if: ${{ !inputs.mock }}
        working-directory: teams/modules/team
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.AZURE_STORAGE_CONTAINER }}" \
            -backend-config="key=teams/${TEAM_SLUG}.tfstate" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform apply
        if: ${{ !inputs.mock }}
        working-directory: teams/modules/team
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          cat > members.auto.tfvars.json <<EOF
          { "members": $TF_MEMBERS }
          EOF
          terraform apply -auto-approve \
            -var "org=$GH_ORG" \
            -var "team_name=$TEAM_NAME" \
            -var "privacy=$PRIVACY" \
            -var "description=$DESCRIPTION" \
            -var "parent_team_slug=$PARENT_TEAM_SLUG"
          terraform output -json > tf.json
          {
            echo "TEAM_ID=$(jq -r .team_id.value tf.json)"
            echo "HTML_URL=$(jq -r .html_url.value tf.json)"
          } >> "$GITHUB_ENV"

      - name: Cleanup Terraform
        if: ${{ always() && !inputs.mock }}
        working-directory: teams/modules/team
        run: rm -rf .terraform terraform.tfstate*

      - name: Upsert entity to Port
        if: ${{ !inputs.mock }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: UPSERT
          identifier: ${{ env.TEAM_SLUG }}
          title: ${{ env.TEAM_NAME }}
          blueprint: ${{ env.BLUEPRINT }}
          properties: |
            {
              "description": "${{ env.DESCRIPTION }}",
              "privacy": "${{ env.PRIVACY }}",
              "htmlUrl": "${{ env.HTML_URL }}",
              "aliases": ${{ env.ALIASES }},
              "members": ${{ env.TF_MEMBERS }}
            }
          relations: |
            {
              "parent": ${{ env.PARENT_REL }}
            }
          runId: ${{ env.RUN_ID }}
          status: success
          logMessage: ${{ env.PORT_MESSAGE }}

      - name: Finalize manifest
        if: ${{ !inputs.mock }}
        run: |
          members_block=$(echo "$TF_MEMBERS" | jq -r '.[] | "- username: \(.username)\n  role: \(.role)"')
          aliases_block=$(echo "$ALIASES" | jq -r '.[] | "- \(.)"')
          cat > "$MANIFEST" <<MANIFEST
          apiVersion: v1
          kind: GitHubTeam
          metadata:
            name: "$TEAM_NAME"
            slug: "$TEAM_SLUG"
            createdAt: "$CREATED_AT"
            createdBy: "$REQUESTED_BY"
          spec:
            description: "$DESCRIPTION"
            privacy: "$PRIVACY"
            parent:
              slug: "${PARENT_TEAM_SLUG:-null}"
            members:
            $(if [ -n "$members_block" ]; then echo "$members_block" | sed 's/^/    /'; else echo "    []"; fi)
            aliases:
            $(if [ -n "$aliases_block" ]; then echo "$aliases_block" | sed 's/^/    /'; else echo "    []"; fi)
          status:
            id: "$TEAM_ID"
            htmlUrl: "$HTML_URL"
            phase: active
          MANIFEST

      - name: Commit manifest
        if: ${{ !inputs.mock }}
        uses: ./.github/actions/commit-yaml
        with:
          path: ${{ env.MANIFEST }}
          message: Add team '${{ env.TEAM_SLUG }}' (automated via Port)

      - name: Report failure to Port
        if: ${{ failure() && !inputs.mock }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.RUN_ID }}
          status: failure
          logMessage: 'Workflow failed'

      - name: Mark manifest failed
        if: ${{ failure() && !inputs.mock }}
        run: |
          if [ -f "$MANIFEST" ]; then
            sed -i 's/phase: creating/phase: failed/' "$MANIFEST"
          fi

# Test cases:
# - Happy path: new closed team with two members (one maintainer), no parent
# - Parent team: create child under existing parent
# - Duplicate name/slug: must fail validation
# - Member not in org: skip user, succeed with warning
# - Secret team: privacy=secret works
# - Idempotency: second run with same inputs fails validation
